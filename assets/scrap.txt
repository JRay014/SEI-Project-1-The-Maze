// if (player.parentElement = tile15) {
//     tile20.addEventListener('click', () => move(tile20));
// } else if (player.parentElement = tile20) {
//     tile15.addEventListener('click', () => move(tile15));
//     tile19.addEventListener('click', () => move(tile19));
// } else if (player.parentElement = tile19) {
//     tile14.addEventListener('click', () => move(tile14));
// } else if (player.parentElement = tile14) {
//     tile9.addEventListener('click', () => move(tile9));
//     tile19.addEventListener('click', () => move(tile19));
// } else if (player.parentElement = tile9) {
//     tile8.addEventListener('click', () => move(tile8));
//     tile10.addEventListener('click', () => move(tile10));
//     tile14.addEventListener('click', () => move(tile14));
// }






const player = document.querySelector('.player');
const board = document.querySelector('body');
const maze = document.querySelector('.maze');
const mazeTiles = document.querySelectorAll('.maze-tile');
const startButton = document.querySelector('.start');
const tile15 = document.querySelector('#fifthteen');
const tile6 = document.querySelector('#six');
const tile8 = document.querySelector('#eight');
const tile9 = document.querySelector('#nine');
const tile10 = document.querySelector('#ten');
const tile14 = document.querySelector('#fourteen');
const tile19 = document.querySelector('#nineteen');
const tile20 = document.querySelector('#twenty');

const moveConditions = {
    fifthteen: ['twenty'],
    twenty: ['fifthteen','nineteen'],
    nineteen: ['twenty','fourteen'],
    fourteen: ['nineteen','nine'],
    nine: ['fourteen','ten','eight'],
    ten: ['nine'],
    eight: ['nine','seven'],
    seven: ['eight','six'],
}

function enterTheMaze() {
//startTile
    // const tile15 = document.querySelector('#fifthteen');
    // const startButton = document.querySelector('.start');
    // const maze = document.querySelector('.maze');
    tile15.append(player);
    startButton.remove();
    maze.style.height = '98%';
    // player.style.
    // console.log("it works")
    const resetButton = document.createElement('button');
    resetButton.innerHTML = 'Reset Maze';
    board.append(resetButton);
    mazeTiles.forEach((mazeTile) => {
        mazeTile.addEventListener('click', (evt) => {
           move(evt.target); 
        })
    // evt.target = moveTo;
    // return moveTo;
    });
}

function move(tile) {
    currentTile = player.parentElement;
    // console.log(tile.id);
    // console.log(player.parentElement);
    // console.log(player.parentElement.id);
    for(const inTile in moveConditions) {
        if (player.parentElement.id = inTile) {
            tile.append(player);
        } else {
            console.log('invalid move!')
        }
    }

    
    // for(tile in moveConditions) {
    //     if (currentTile == tile) {
    //         moveTo(moveConditions[tile]);
    //     }
    // }
    // if (tile15.children.includes(player) == true) {
}


function win() {
    if(player.parentElement = tile6) {
        alert('You made it out of the Maze!');
        reset();
    }
    //target eventlistener to tile 6
}

function reset() {
    
}

// if (player.parentElement = tile15) {
//         console.log('yes')
//     }


startButton.addEventListener('click', enterTheMaze);

// x.addEventListener('click', move());
//have player move in each tile of the div.
// every folk causes a click event.


Object.keys(moveConditions).forEach((key) => {
    console.log(key, moveConditions[key]);
});
Object.values(moveConditions).forEach((value) => {
    console.log(value);
});



function move(moveToTile) {
    currentTile = player.parentElement.id;
    Object.keys(moveConditions).forEach((key) => {
        Object.values(moveConditions).forEach((value) => {
            if ((currentTile == key) && (moveToTile.id == value)) {
                moveToTile.append(player);
            } else {
                console.log('invalid move!')
        }
        });
    })
}

function move(moveToTile) {
    currentTile = player.parentElement.id;
    console.log(currentTile);
    console.log(moveToTile.id);
    Object.keys(moveConditions).forEach((key) => {
        // console.log('key', key);
        Object.values(moveConditions).forEach((value) => {
            // console.log('value', value);
            if (currentTile == key) {
                for(let i=0; i < value.length; i++) {
                    console.log(key[i])
                if (moveToTile.id == value) {
                moveToTile.append(player);
                }
            }
            } else {
                // console.log('invalid move!')
        }
        });
    })
}



    const key = {}
    const value = {}
    Object.keys(moveConditions).forEach((key) => {
        return key 
    });
    console.log(key);
    Object.values(moveConditions).forEach((value) => {
        return value 
    });
    console.log(value);
    for (value of key) {
        if ((currentTile == key) && (moveToTile.id == value)) {
            moveToTile.append(player);
        } else {
            console.log('invalid move');
        }
    };
}























// for (let i=0; i<wall6.collision().y.length; i++) {
     //     if (this.y === wall6.collision().y[i]) {
     //         console.log("Bang");
     //         this.y -= 0;
     //         break;
     //     } else {
     //         this.y -= 12;
     //     }
     // }

     // for (let i=0; i < maze1Walls.length; i++){
     //     if ((this.x >= maze1Walls[i].sx && this.x <= maze1Walls[i].fx) || (this.y >= maze1Walls[i].sy && this.y <= maze1Walls[i].fy)){
     //         console.log('Collide');
     //         this.x += 0;
     //     } else if ((this.x <= maze1Walls[i].sx || this.x >= maze1Walls[i].fx) && (this.y <= maze1Walls[i].sy || this.y >= maze1Walls[i].fy)) {
     //         this.x += 1;
     //     }
     // }


 // function addWallsCollision(wx, wy) {
    //     ctx.lineTo(wx, wy);
    //     ctx.isPointInPath(wx, wy); //isPointInStroke
    //     walls.push({
    //         x: wx,
    //         y: wy
    //     });
    // }

// for (let i=0; i<wallsCollision.length; i++) {
    //     if (this.x == wallsCollision[i].x) {
    //         console.log(wallsCollision[i]);
    //         this.x -= 0;
    //     } else {
    //         console.log(wallsCollision);
                // this.x -= 1;
    //     }
// }


// console.log(maze1Walls[0].collision().x);
// console.log(maze1Walls[0].collision().y);
// console.log(maze1Walls[1].collision().x);
// console.log(maze1Walls[1].collision().y);
// console.log(player.x);
// console.log(player.y);


// console.log(`Check: ${wallsCheck()}`);
// console.log(`player x: ${player.x}`);
// console.log(`player y: ${player.y}`);




// wall1.collision()
// wall2.collision()
// wall3.collision()
// wall4.collision()
// wall5.collision()
// wall6.collision()
// wall7.collision()
// wall8.collision()
// wall9.collision()
// wall10.collision()
// wall11.collision()
// wall12.collision()
// wall13.collision()

//generate collision on walls
//Ties into maze wall generation.
    //Single array with line coordinates on the canvas that loops for collision.   
    
    
    
    
    
//if player x and y match wall x and y then stop movement. 
//loop through walls each time to check. 
//make walls class and add to it each time a new wall is created in a template.
    
//collision on walls
//collision on edges
//collision on win point


//generate maze walls
function generateMaze() {
    ctx.beginPath();
    // ctx.moveTo(126, 0);
    wall1.render();
    // ctx.lineTo(126, 252);
    wall2.render();
    // ctx.lineTo(378, 252);
    // ctx.moveTo(252, 126);
    wall3.render();
    // ctx.lineTo(630, 126);
    wall4.render();
    // ctx.lineTo(630, 504);
    wall5.render();
    // ctx.lineTo(504, 504);
    // ctx.moveTo(630, 378);
    wall6.render();
    // ctx.lineTo(0, 378);
    // ctx.moveTo(378, 378);
    wall7.render();
    // ctx.lineTo(378, 630);
    // ctx.moveTo(126, 756);
    wall8.render();
    // ctx.lineTo(126, 504);
    wall9.render();
    // ctx.lineTo(252, 504);
    wall10.render();
    // ctx.lineTo(252, 630);
    // ctx.moveTo(504, 630);
    wall11.render();
    // ctx.lineTo(630, 630);
    wall12.render();
    // ctx.lineTo(630, 756);
    // ctx.moveTo(504, 126);
    wall13.render();
    // ctx.lineTo(504, 252);
    ctx.stroke();
}



if (pr.key === "w") {
            if (wallsCheck() == 0) {
                this.y += 24;
            } else if (wallsCheck() == 1) {
                this.y -= 6;
            }
        } else if (pr.key === "s") {
            if (wallsCheck() == 0) {
                this.y -= 24;
            } else if (wallsCheck() == 1) {
                this.y += 6;
            }
        } else if (pr.key === "a") {
            if (wallsCheck() == 0) {
                this.x += 24;
            } else if (wallsCheck() == 1) {
                this.x -= 6;
            }
        } else if (pr.key === "d") {
            if (wallsCheck() == 0) {
                this.x -= 24;
            } else if (wallsCheck() == 1) {
                this.x += 6;
            }
        }





 if ((player.x === this.x) && (player.y === this.y)) {
            alert("You Escaped the Maze!");
            reset();
        }